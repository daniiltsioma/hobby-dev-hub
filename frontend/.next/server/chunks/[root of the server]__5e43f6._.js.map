{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/loganbrescia/CS554/HobbyDevProj/hobby-dev-hub/frontend/app/api/login/route.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport { cookies } from \"next/headers\";\nimport { redirect, RedirectType } from \"next/navigation\";\n\nconst GITHUB_APP_CLIENT_ID = process.env.GITHUB_APP_CLIENT_ID || \"\";\nconst GITHUB_APP_CLIENT_SECRET = process.env.GITHUB_APP_CLIENT_SECRET || \"\";\n\nexport async function GET(request: NextRequest) {\n    const searchParams = request.nextUrl.searchParams;\n    const githubCode = searchParams.get(\"code\");\n\n    const githubAPIUrl = \"https://github.com/login/oauth/access_token\";\n\n    if (!githubCode) {\n        return new Response(`Error: no github code provided.`, {\n            status: 400,\n        });\n    }\n\n    const githubTokenQueryParams = new URLSearchParams({\n        client_id: GITHUB_APP_CLIENT_ID,\n        client_secret: GITHUB_APP_CLIENT_SECRET,\n        code: githubCode,\n    });\n\n    const response = await fetch(\n        `${githubAPIUrl}?${githubTokenQueryParams.toString()}`\n    );\n\n    const responseText = await response.text();\n\n    const tokenData: any = {};\n\n    responseText.split(\"&\").map((str) => {\n        const [key, value] = str.split(\"=\");\n        tokenData[key] = value;\n    });\n\n    const cookieStore = await cookies();\n\n    cookieStore.set({\n        name: \"accessToken\",\n        value: tokenData.access_token,\n        expires: new Date(Date.now() + Number(tokenData.expires_in)),\n        httpOnly: true,\n        path: \"/\",\n    });\n\n    cookieStore.set({\n        name: \"refreshToken\",\n        value: tokenData.refresh_token,\n        expires: new Date(\n            Date.now() + Number(tokenData.refresh_token_expires_in)\n        ),\n        httpOnly: true,\n        path: \"/\",\n    });\n\n    redirect(\"/\", RedirectType.push);\n}\n"],"names":[],"mappings":";;;AACA;AACA;AAAA;;;AAEA,MAAM,uBAAuB,QAAQ,GAAG,CAAC,oBAAoB,IAAI;AACjE,MAAM,2BAA2B,QAAQ,GAAG,CAAC,wBAAwB,IAAI;AAElE,eAAe,IAAI,OAAoB;IAC1C,MAAM,eAAe,QAAQ,OAAO,CAAC,YAAY;IACjD,MAAM,aAAa,aAAa,GAAG,CAAC;IAEpC,MAAM,eAAe;IAErB,IAAI,CAAC,YAAY;QACb,OAAO,IAAI,SAAS,CAAC,+BAA+B,CAAC,EAAE;YACnD,QAAQ;QACZ;IACJ;IAEA,MAAM,yBAAyB,IAAI,gBAAgB;QAC/C,WAAW;QACX,eAAe;QACf,MAAM;IACV;IAEA,MAAM,WAAW,MAAM,MACnB,GAAG,aAAa,CAAC,EAAE,uBAAuB,QAAQ,IAAI;IAG1D,MAAM,eAAe,MAAM,SAAS,IAAI;IAExC,MAAM,YAAiB,CAAC;IAExB,aAAa,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;QACzB,MAAM,CAAC,KAAK,MAAM,GAAG,IAAI,KAAK,CAAC;QAC/B,SAAS,CAAC,IAAI,GAAG;IACrB;IAEA,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEhC,YAAY,GAAG,CAAC;QACZ,MAAM;QACN,OAAO,UAAU,YAAY;QAC7B,SAAS,IAAI,KAAK,KAAK,GAAG,KAAK,OAAO,UAAU,UAAU;QAC1D,UAAU;QACV,MAAM;IACV;IAEA,YAAY,GAAG,CAAC;QACZ,MAAM;QACN,OAAO,UAAU,aAAa;QAC9B,SAAS,IAAI,KACT,KAAK,GAAG,KAAK,OAAO,UAAU,wBAAwB;QAE1D,UAAU;QACV,MAAM;IACV;IAEA,CAAA,GAAA,uLAAA,CAAA,WAAQ,AAAD,EAAE,KAAK,uLAAA,CAAA,eAAY,CAAC,IAAI;AACnC"}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}