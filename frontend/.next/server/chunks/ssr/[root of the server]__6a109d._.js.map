{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/loganbrescia/CS554/HobbyDevProj/hobby-dev-hub/frontend/app/lib/auth.ts"],"sourcesContent":["\"use server\";\nimport { ReadonlyRequestCookies } from \"next/dist/server/web/spec-extension/adapters/request-cookies\";\nimport { cookies } from \"next/headers\";\n\nconst GITHUB_APP_CLIENT_ID = process.env.GITHUB_APP_CLIENT_ID || \"\";\nconst GITHUB_APP_CLIENT_SECRET = process.env.GITHUB_APP_CLIENT_SECRET || \"\";\n\nexport async function logout() {\n    \"use server\";\n    const cookieStore = await cookies();\n\n    cookieStore.delete(\"accessToken\");\n    cookieStore.delete(\"refreshToken\");\n}\n\nexport async function generateGitHubTokensFromCode(githubCode: string) {\n    const githubAPIUrl = \"https://github.com/login/oauth/access_token\";\n\n    if (!GITHUB_APP_CLIENT_ID || !GITHUB_APP_CLIENT_SECRET) {\n        throw new Error(\"Github authentication credentials not set.\");\n    }\n\n    const githubTokenQueryParams = new URLSearchParams({\n        client_id: GITHUB_APP_CLIENT_ID,\n        client_secret: GITHUB_APP_CLIENT_SECRET,\n        code: githubCode,\n    });\n\n    const response = await fetch(\n        `${githubAPIUrl}?${githubTokenQueryParams.toString()}`\n    );\n\n    const responseText = await response.text();\n\n    const tokenData: any = {};\n\n    responseText.split(\"&\").map((str) => {\n        const [key, value] = str.split(\"=\");\n        tokenData[key] = value;\n    });\n\n    return tokenData;\n}\n\ninterface AuthCookieProps {\n    name: string;\n    value: string;\n    expiresIn: number;\n}\n\nexport async function setAuthCookie(\n    cookieStore: ReadonlyRequestCookies,\n    { name, value, expiresIn }: AuthCookieProps\n) {\n    cookieStore.set({\n        name,\n        value,\n        expires: new Date(Date.now() + expiresIn),\n        httpOnly: true,\n        path: \"/\",\n    });\n}\n"],"names":[],"mappings":";;;;;;;IAOsB;IAQA;IAmCA"}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/loganbrescia/CS554/HobbyDevProj/hobby-dev-hub/frontend/app/components/header/userHeader.tsx"],"sourcesContent":["\"use client\";\n\nimport { logout } from \"@/app/lib/auth\";\nimport { redirect } from \"next/navigation\";\n\ninterface Props {\n    username: string;\n}\n\nasync function logoutHandler() {\n    await logout();\n    redirect(\"/\");\n}\n\nexport default function UserHeader({ username }: Props) {\n    return (\n        <div className=\"flex items-center\">\n            Welcome, {username}\n            <button\n                className=\"border hover:bg-red-100 border-red-600 text-red-600 py-1 px-4 rounded-md ml-4\"\n                onClick={logoutHandler}\n            >\n                Logout\n            </button>\n        </div>\n    );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AASA,eAAe;IACX,MAAM,CAAA,GAAA,kHAAA,CAAA,SAAM,AAAD;IACX,CAAA,GAAA,kIAAA,CAAA,WAAQ,AAAD,EAAE;AACb;AAEe,SAAS,WAAW,EAAE,QAAQ,EAAS;IAClD,qBACI,8OAAC;QAAI,WAAU;;YAAoB;YACrB;0BACV,8OAAC;gBACG,WAAU;gBACV,SAAS;0BACZ;;;;;;;;;;;;AAKb"}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}